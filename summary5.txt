/**********************Context API 를 사용한 전역 값 관리************************/

특정 함수나 변수를 부모컴포넌트에서 자식컴포넌트로 전달할때
직계자식이아닌 자식의 자식등 여러 단계를 거처 전달될때가 있다.
이때 이것들을 Context API를 사용하여 전역적으로 관리하면 편리
*함수 또는 변수 외에 상태나 DOM등 여러가지가 될 수 있다.

Context 를 만들 땐 다음과 같이 React.createContext() 라는 함수를 사용합니다.
const UserDispatch = React.createContext(null);
이렇게 설정한 컴포넌트

정작 아래의 내용은 설명 안함 provider컴포넌트 사용안함
Context 를 만들면, Context 안에 Provider 라는 컴포넌트가 들어있는데 이 컴포넌트를 통하여 Context 의 값을 정할 수 있습니다. 이 컴포넌트를 사용할 때, value 라는 값을 설정해주면 됩니다.
<UserDispatch.Provider value={dispatch}>...</UserDispatch.Provider>

/****************Immer 를 사용한 더 쉬운 불변성 관리******************/
리액트에서 배열이나 객체를 업데이트 해야 할 때에는 직접 수정 하면 안되고 불변성을 지켜주면서 업데이트를 해주어야 합니다.
$ yarn add immer
이 라이브러리를 사용 할 땐 다음과 같이 사용합니다.

우선 코드의 상단에서 immer 를 불러와주어야 합니다. 보통 produce 라는 이름으로 불러옵니다.

import produce from 'immer';
그리고 produce 함수를 사용 할 때에는 첫번째 파라미터에는 수정하고 싶은 상태, 두번째 파라미터에는 어떻게 업데이트하고 싶을지 정의하는 함수를 넣어줍니다.
두번째 파라미터에 넣는 함수에서는 불변성에 대해서 신경쓰지 않고 그냥 업데이트 해주면 다 알아서 해줍니다.
const state = {
  number: 1,
  dontChangeMe: 2
};

const nextState = produce(state, draft => {
  draft.number += 1;
});

console.log(nextState);
// { number: 2, dontChangeMe: 2 }

immer을 함수로 만들어 사용하려면 첫번째 파라미터를 생략한다.
const todo = {
  text: 'Hello',
  done: false
};

const updater = produce(draft => {
  draft.done = !draft.done;
});

const nextTodo = updater(todo);

console.log(nextTodo);
// { text: 'Hello', done: true }

